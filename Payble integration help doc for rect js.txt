PAYable Tokenize Payment React.js SDK
PAYable Tokenize Payment React.js SDK helps to integrate tokenized payments with the payment gateway of your website.

The Payable Tokenize Payment Gateway Integration
First, You need to get the following credentials to integrate with the IPG SDK from Payable:

Merchant Key:
Merchant Token:
Business Key:
Business Token:
You can simply use an HTML Form to submit the below params to Payable Payment Gateway. When your customer clicks on the payment/checkout button, It will be redirected to the Payable Payment Gateway. The Customer can confirm the payment by clicking on the 'continue' button. Then your customer will be securely redirected to the commercial bank Payment Gateway and the customer can then enter the credentials (Card No / Cardholder name / CVV ) and process the payment there. Once the payment is made, The payable payment gateway will show the payment status to your customer and send the receipt to your customer's email. Additionally, the card will be tokenized and saved for future use.

Version V4 - v4.1.3
Implementation
1. Install Payable IPG React.js SDK package in your project.

1.1. Run the following command inside your project.

npm i payable-ipg-js
1.2. Import the Payable IPG React.js SDK package.

import { payablePayment } from "payable-ipg-js";
2. Create your payment request with basic required fields.

2.1. Required Form Parameters:

notifyUrl - URL to callback the status of the payment (Needs to be a URL accessible on a public IP/domain)
returnUrl - URL to redirect users when success
logoUrl - Logo url to show the logo in SDK
merchantKey - Payable Merchant ID [Given by PAYable]
currencyCode - Currency Code (LKR/EUR/GBP/USD)
checkValue - Generated hash value to ensure extra security
orderDescription - Small Description for the Order
amount - Total Payment Amount
invoiceId - Invoice ID generated by the merchant
paymentType - Payment Type (1 means ONE_TIME_PAYMENT, 2 means RECURRING_PAYMENT, 3 means TOKENIZE_PAYMENT)
customerFirstName - Customer's First Name
customerLastName - Customer's Last Name
customerMobilePhone - Customer's Mobile No
customerEmail - Customer's Email
billingAddressStreet - Billing Address Line1
billingAddressCity - Billing City
billingAddressCountry - Billing Country
2.2. Tokenization Parameters (Required for Card Tokenization || paymentType = 3 ):

isSaveCard - Set to "1" to save card for future use
doFirstPayment - Set to "1" to charge immediately
customerRefNo - Customer reference number for tokenization
2.3. Payment type Parameters: Following parameters are required if the payment type is 2

startDate - Payment Start Date
endDate - Payment End Date (It can be any date or FOREVER)
recurringAmount - Recurring payment Amount
interval - Payment Interval (It can be MONTHLY, ANNUALLY)
isRetry - Is Retry
retryAttempts - Retry Attempts
2.4. Optional Form Parameters:

custom1 - Merchant specific data, a Custom 1
custom2 - Merchant specific data, a Custom 2
customerPhone - Customer's Phone No
billingAddressStreet2 - Billing Address Line2
billingCompanyName - Billing Company
billingAddressPostcodeZip - Billing Postal Code
billingAddressStateProvince - Billing Province
shippingContactFirstName - Shipping Contact First Name
shippingContactLastName - Shipping Contact Last Name
shippingContactMobilePhone - Shipping Contact Mobile No
shippingContactPhone - Shipping Contact Phone No
shippingContactEmail - Shipping Contact Email
shippingCompanyName - Shipping Contact Company
shippingAddressStreet - Shipping Address Line1
shippingAddressStreet2 - Shipping Address Line2
shippingAddressCity - Shipping City
shippingAddressStateProvince - Shipping Province
shippingAddressCountry - Shipping Country (LKA)
shippingAddressPostcodeZip - Shipping Postal Code
In Request, checkValue is a combination of merchant key, invoice id, amount, currency parameter set in a predefined sequence given by PAYable which then encrypted with merchant token (a unique Secret value for the Merchant which was shared by PAYable) using SHA-512.

Important: The checkValue generation format is different for regular one-time payments vs tokenize payments.

CheckValue Generation Formats
For Regular One-Time Payments
Format: UPPERCASE(SHA512[<merchantKey>|<invoiceId>|<amount>|<currencyCode>|UPPERCASE(SHA512[<merchantToken>])])

JavaScript Example:

// First install crypto-js: npm install crypto-js
const CryptoJS = require("crypto-js");

function getCheckValue(
  merchant_key,
  invoice_id,
  amount,
  currency,
  merchant_token
) {
  // Step 1: Hash the merchant token
  const mToken = CryptoJS.SHA512(merchant_token).toString().toUpperCase();

  // Step 2: Create the value string
  const txt =
    merchant_key +
    "|" +
    invoice_id +
    "|" +
    amount +
    "|" +
    currency +
    "|" +
    mToken;

  // Step 3: Hash the entire value string
  const checkValue = CryptoJS.SHA512(txt).toString().toUpperCase();
  return checkValue;
}
For Tokenize Payments (paymentType = 3 )
Format: UPPERCASE(SHA512[<merchantKey>|<invoiceId>|<amount>|<currencyCode>|<customerRefNo>|UPPERCASE(SHA512[<merchantToken>])])

JavaScript Example:

// First install crypto-js: npm install crypto-js
const CryptoJS = require("crypto-js");

function getCheckValueToken(
  merchant_key,
  invoice_id,
  amount,
  currency,
  customer_ref_no,
  merchant_token
) {
  // Step 1: Hash the merchant token
  const mToken = CryptoJS.SHA512(merchant_token).toString().toUpperCase();

  // Step 2: Create the value string (includes customerRefNo for tokenization)
  const txt =
    merchant_key +
    "|" +
    invoice_id +
    "|" +
    amount +
    "|" +
    currency +
    "|" +
    customer_ref_no +
    "|" +
    mToken;

  // Step 3: Hash the entire value string
  const checkValue = CryptoJS.SHA512(txt).toString().toUpperCase();
  return checkValue;
}
2.5. Sample form with tokenization:

const payment = {
  checkValue: "Your Check Value", // Use getCheckValueToken() for tokenization
  orderDescription: "Payment for furni",
  invoiceId: "INVGl2lrQHEEm",
  logoUrl: "https://ipgv2-comm.payable.lk/images/chocolate2.png",
  notifyUrl: "https://yoursite.com/v1/webhook/payment",
  returnUrl: "https://yoursite.com/receipt",
  merchantKey: "F4D847FB8BF0EF52",
  customerFirstName: "John",
  customerLastName: "Doe",
  customerMobilePhone: "0715117264",
  customerPhone: "1232131233",
  customerEmail: "john.doe@example.com",
  billingCompanyName: "Example Company",
  billingAddressStreet: "123 Main Street",
  billingAddressStreet2: "Apt 1",
  billingAddressCity: "Colombo",
  billingAddressStateProvince: "Western",
  billingAddressCountry: "LK",
  billingAddressPostcodeZip: "10000",
  amount: "100.00",
  currencyCode: "LKR",
  paymentType: "1",
  isSaveCard: "1", // Save card for future use
  customerRefNo: "CUST_123456789", // Customer reference for tokenization
  doFirstPayment: "1", // Charge immediately
};
Note: Amount validation rules:

amount: Must be ≥ 2.00 (standard validation applies)
If isSaveCard = 1 and doFirstPayment = 0: Can be 0.00 (tokenize only)
Otherwise: Must be ≥ 2.00
3. Communicate with PAYable React.js SDK.

3.1. Submit your form json data into payablePayment(). payment is the payment object and testMode is boolean.

payablePayment(payment, testMode);
Environment Configuration:

Test Mode (testMode = true): Connects to Sandbox environment for testing
Live Mode (testMode = false): Connects to Production environment for live payments
Example:

// For testing (Sandbox)
payablePayment(payment, true);

// For live payments (Production)
payablePayment(payment, false);
Additional Tokenization Features
Live Root URL: POST https://ipgpayment.payable.lk
Sandbox Root URL: POST https://sandboxipgpayment.payable.lk
1. List Saved Cards
Retrieve all saved cards for a customer.

Endpoint: POST {{rootUrl}}/ipg/v2/tokenize/listCard

Headers Required:

Content-Type: application/json
Required Parameters:

merchantId - Your merchant ID
customerId - Customer ID
checkValue - Security hash
CheckValue Generation:

UPPERCASE(SHA512[merchantId|customerId|UPPERCASE(SHA512[merchantToken])])
2. Delete Saved Card
Remove a saved card from customer's account.

Endpoint: POST {{rootUrl}}/ipg/v2/tokenize/deleteCard

Headers Required:

Content-Type: application/json
Required Parameters:

merchantId - Your merchant ID
customerId - Customer ID
tokenId - Token ID to delete
checkValue - Security hash
CheckValue Generation:

UPPERCASE(SHA512[merchantId|customerId|tokenId|UPPERCASE(SHA512[merchantToken])])
3. Edit Saved Card
Update card nickname or set as default card.

Endpoint: POST {{rootUrl}}/ipg/v2/tokenize/editCard

Headers Required:

Content-Type: application/json
Authorization: Bearer {access_token}
How to Generate JWT Access Token:

Create Basic Auth token: base64(businessKey:businessToken)
POST to {{rootUrl}}/ipg/v2/auth/tokenize with headers:
Content-Type: application/json
Authorization: {basicAuthToken}
Body: {"grant_type": "client_credentials"}
Extract accessToken from response and use in Authorization header
Required Parameters:

merchantId - Your merchant ID
customerId - Customer ID
tokenId - Token ID to edit
nickName - Optional nickname for the card
isDefaultCard - Set as default card (0 or 1)
checkValue - Security hash
CheckValue Generation:

UPPERCASE(SHA512[merchantId|customerId|tokenId|UPPERCASE(SHA512[merchantToken])])
4. Pay with Saved Card
Process payment using a previously saved card token.

Endpoint: POST {{rootUrl}}/ipg/v2/tokenize/pay

Headers Required:

Content-Type: application/json
Authorization: Bearer {access_token}
How to Generate Access Token:

Create Basic Auth token: base64(businessKey:businessToken)
POST to {{rootUrl}}/ipg/v2/auth/tokenize with headers:
Content-Type: application/json
Authorization: {basicAuthToken}
Body: {"grant_type": "client_credentials"}
Extract accessToken from response and use in Authorization header
Required Parameters:

merchantId - Your merchant ID
customerId - Customer ID
tokenId - Token ID to use for payment
invoiceId - Invoice ID
amount - Payment amount
currencyCode - Currency code
checkValue - Security hash
webhookUrl - Webhook URL for notifications (https://yoursite.com/webhook/payment)
Optional Parameters:

custom1 - Custom field 1 for merchant-specific data
custom2 - Custom field 2 for merchant-specific data
CheckValue Generation:

UPPERCASE(SHA512[merchantId|invoiceId|amount|currencyCode|customerId|tokenId|UPPERCASE(SHA512[merchantToken])])
5. Add Card
Note: Follow the same process as section 2.5 to save the card.

3.2. Payment related Error details.

Error will be field validation (code : 3009) and other common errors.

This is the sample validation error json:

{
  "status": 3009,
  "success": false,
  "error": {
    "startDate": ["Start date should be today date."]
  }
}
Other common error (status can be 400/500/any other):

{
  "status": 400,
  "success": false,
  "error": "Something went wrong. Please contact your merchant."
}
Listening to Payment Notification Data
Payable Payment Gateway will send back to your website notifies the payment status to the notifyUrl. You need to get the request and send the response.

It cannot test the payment notification by print/echo methods since notifyUrl never loads to the browser as it's a server callback. You can only test it by updating your database upon fetching the notification.
It cannot test the payment notification on localhost. You need to submit a publicly accessible IP or domain based URL as your notifyUrl is to directly notify your server.
Server callback Json
For One-Time Payment (paymentType = 1):

{
  "merchantKey": "YOUR_MERCHANT_KEY",
  "payableOrderId": "oid-XXXXXXXX-XXX-XXXX-XXXX-XXXX",
  "payableTransactionId": "XXXXXXXX-XXX-XXXX-XXXX-XXXXXXXXX",
  "payableAmount": "100.00",
  "payableCurrency": "LKR",
  "invoiceNo": "YOUR_INVOICE_ID",
  "statusCode": 1,
  "statusMessage": "SUCCESS",
  "paymentType": 1,
  "paymentMethod": 1,
  "paymentScheme": "MASTERCARD",
  "custom1": "YOUR_CUSTOM_1",
  "custom2": "YOUR_CUSTOM_2",
  "cardHolderName": "CARD_HOLDER_NAME",
  "cardNumber": "512345xxxxxx0008",
  "checkValue": "YOUR_CHECK_VALUE"
}
For Tokenize Payment (paymentType = 3):

{
  "merchantKey": "YOUR_MERCHANT_KEY",
  "statusCode": 1,
  "payableTransactionId": "XXXXXXXX-XXX-XXXX-XXXX-XXXXXXXXX",
  "paymentMethod": 1,
  "payableOrderId": "oid-XXXXXXXX-XXX-XXXX-XXXX-XXXX",
  "invoiceNo": "YOUR_INVOICE_ID",
  "payableAmount": "100.00",
  "payableCurrency": "LKR",
  "statusMessage": "SUCCESS",
  "paymentType": 1,
  "paymentScheme": "MASTERCARD",
  "cardHolderName": "CARD_HOLDER_NAME",
  "cardNumber": "512345xxxxxx0008",
  "paymentId": "YOUR_PAYMENT_ID",
  "custom1": null,
  "custom2": null,
  "checkValue": "YOUR_CHECK_VALUE",
  "customerRefNo": "YOUR CUSTOMER REF NO",
  "token": {
    "tokenId": "YOUR_TOKEN_ID",
    "maskedCardNo": "512345xxxxxx0008",
    "exp": "MMYY",
    "reference": null,
    "nickname": null,
    "tokenStatus": "SUCCESS",
    "defaultCard": 0
  },
  "merchantId": "YOUR_MERCHANT_ID",
  "customerId": "YOUR_CUSTOMER_ID",
  "uid": "YOUR_UID",
  "statusIndicator": "YOUR_STATUS_INDICATOR"
}
Description
Common fields for both payment types:

payableOrderId - Unique Order Id generated by PAYable
payableTransactionId - Unique Transaction Reference Id generated by PAYable for the processed payment
payableAmount - Total amount of the Payment
payableCurrency - Currency Code of the Payment (LKR Only)
invoiceNo - Unique Id sent by Merchant to the Checkout page
statusMessage - Message received from payment gateway which the customer tried to pay(SUCCESS/FAILURE)
paymentType - Payment type selected during the Checkout
CARD (SUPPORTED)
BANKING (Not implemented yet)
WALLET (Not implemented yet)
paymentMethod - Payment method selected during the Checkout
VISA / MASTERCARD / CUP(Visa and Mastercard are SUPPORTED / CUP Not implemented Yet)
AMEX / DINERS CLUB / DISCOVER
SAMPATH VISHWA (Not implemented yet)
paymentScheme - Payment scheme selected by the customer (VISA / MASTERCARD)
If the customer made the payment by VISA or MASTER credit/debit card, following cardHolderName and cardNumber parameters will also be available.

cardHolderName - Name on the Card
cardNumber - Masked card number (Ex: ********0008)
Additional fields for Tokenize Payments only:

customerRefNo - Customer reference number used for tokenization
paymentId - Payment ID
merchantId - Merchant ID
customerId - Customer ID
uid - Unique identifier
statusIndicator - Status indicator
token - Token object containing card tokenization details
tokenId - Unique token ID for the saved card
maskedCardNo - Masked card number for display
exp - Card expiration date (MMYY format)
reference - Reference information (if any)
nickname - Card nickname (if set)
tokenStatus - Status of tokenization (SUCCESS/FAILED)
defaultCard - Whether this is the default card (0/1)
Send response to callback
{
  "Status": 200
}
React.js Integration Example
import React from "react";
import { payablePayment } from "payable-ipg-js";

const TokenizePayment = () => {
  const handlePayment = () => {
    const payment = {
      checkValue: "Your Check Value",
      orderDescription: "Payment for furni",
      invoiceId: "INVGl2lrQHEEm",
      logoUrl: "https://ipgv2-comm.payable.lk/images/chocolate2.png",
      notifyUrl: "https://yoursite.com/v1/webhook/payment",
      returnUrl: "https://yoursite.com/receipt",
      merchantKey: "F4D847FB8BF0EF52",
      customerFirstName: "John",
      customerLastName: "Doe",
      customerMobilePhone: "0715117264",
      customerPhone: "1232131233",
      customerEmail: "john@example.com",
      billingCompanyName: "Example Company",
      billingAddressStreet: "123 Main Street",
      billingAddressStreet2: "Apt 1",
      billingAddressCity: "Colombo",
      billingAddressStateProvince: "Western",
      billingAddressCountry: "LK",
      billingAddressPostcodeZip: "10000",
      amount: "100.00",
      currencyCode: "LKR",
      paymentType: "1", // One-time payment
      isSaveCard: "1", // Save card for future use
      customerRefNo: "CUST123456789",
      doFirstPayment: "1", // Charge immediately
    };

    // Process payment with tokenization
    payablePayment(payment, true); // true = test mode (sandbox)
  };

  return (
    <div>
      <h2>Payment with Card Tokenization</h2>
      <button onClick={handlePayment}>Pay & Save Card</button>
    </div>
  );
};

export default TokenizePayment;
Core Functions
Security
Important Security Notes
merchantToken is a secret shared by PAYable for your merchant
Use exact field order and string concatenation with | as the delimiter
Always validate webhook responses using checkValue
Store tokens securely in your database
Use HTTPS for all communications
Never expose your merchantToken in client-side code
CheckValue Validation
Formula for Webhook Validation:

UPPERCASE(SHA512[merchantKey|payableOrderId|payableTransactionId|payableAmount|currencyCode|invoiceNo|statusCode|UPPERCASE(SHA512[merchantToken])])
// Validate webhook response
function validateWebhook(webhookData, merchantToken) {
  const calculatedCheckValue = CryptoJS.SHA512(
    webhookData.merchantKey +
      "|" +
      webhookData.payableOrderId +
      "|" +
      webhookData.payableTransactionId +
      "|" +
      webhookData.payableAmount +
      "|" +
      webhookData.payableCurrency +
      "|" +
      webhookData.invoiceNo +
      "|" +
      webhookData.statusCode +
      "|" +
      CryptoJS.SHA512(merchantToken).toString().toUpperCase()
  )
    .toString()
    .toUpperCase();

  return calculatedCheckValue === webhookData.checkValue;
}